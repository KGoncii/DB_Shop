@model IEnumerable<DB_Shop.Models.Product>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<div class="product-container">
    @foreach (var item in Model)
    {
        <div class="product-card">
            <h3>@Html.DisplayFor(modelItem => item.Name)</h3>
            <p>@Html.DisplayFor(modelItem => item.Description)</p>
            <p>Cena: @Html.DisplayFor(modelItem => item.Price) zł</p>
            <p>W magazynie: @Html.DisplayFor(modelItem => item.StockQuantity)</p>
            <p>Kategoria: @Html.DisplayFor(modelItem => item.Category)</p>

            <div class="quantity-control">
                <button class="btn-quantity" onclick="changeQuantity(-1)">-</button>
                <input type="number" class="quantity-input" value="1" min="1" max="@item.StockQuantity" id="quantity-@item.ProductId" />
                <button class="btn-quantity" onclick="changeQuantity(1)">+</button>
            </div>

            <div class="button-group">
                <a asp-action="Details" asp-route-id="@item.ProductId" class="btn-details">Details</a>
                <button class="btn-add-to-cart" onclick="addToCart(@item.ProductId)">Add to Cart</button>
            </div>
        </div>
    }
</div>
<script>
    function changeQuantity(change) {
        const input = event.target.parentNode.querySelector('.quantity-input');
        let currentValue = parseInt(input.value);

        if (change === -1 && currentValue > 1) {
            input.value = currentValue - 1;
        } else if (change === 1) {
            input.value = currentValue + 1;
        }
    }

    function addToCart(productId) {
        const quantity = document.getElementById(`quantity-${productId}`).value;
        // Dodaj logikę do dodawania produktu do koszyka
        alert(`Dodano ${quantity} sztuk produktu o ID: ${productId} do koszyka.`);
    }

</script>
